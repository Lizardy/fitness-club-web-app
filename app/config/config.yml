imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        mapping_types:
            enum: string
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.project_dir%/var/data/data.sqlite"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    #host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    #spool: { type: memory }

old_sound_rabbit_mq:
    connections:
        default:
            host:     'localhost'
            port:     5672
            user:     'guest'
            password: 'guest'
            vhost:    '/'
            lazy:     true
            connection_timeout: 60
            read_write_timeout: 60

            # requires php-amqplib v2.4.1+ and PHP5.4+
            keepalive: false

            # requires php-amqplib v2.4.1+
            heartbeat: 30

            #requires php_sockets.dll
            use_socket: false # default false
        another:
            # A different (unused) connection defined by an URL. One can omit all parts,
            # except the scheme (amqp:). If both segment in the URL and a key value (see above)
            # are given the value from the URL takes precedence.
            # See https://www.rabbitmq.com/uri-spec.html on how to encode values.
            url: 'amqp://guest:password@localhost:5672/vhost?lazy=1&connection_timeout=6'
    producers:
        # this one is utilised for the initial publishing to exchange both email and sms messages
        send_notification:
            connection:       default
            exchange_options: {name: 'x.send.notification', type: direct}
        # this one is utilised for reblishing messages which failed to be sent inside consumer callback
        resend_notification:
            connection:       default
            exchange_options: {name: 'x.resend.notification', type: direct}
        # this one is for exchange creation and is not used explicitly
        resend_notifications_sms:
            connection:       default
            exchange_options: {name: 'x.resend.notification.sms', type: fanout}
    consumers:
        # should be running with php bin/console rabbitmq:consumer send_notification_email
        send_notification_email:
            connection:       default
            exchange_options: {name: 'x.send.notification', type: direct}
            queue_options:    {name: 'q.send.notification.email', routing_keys: ['rk.notification.email']}
            callback:         AppBundle\Service\EmailNotificationSender
        # no need to run this one, it's for queue creation purposes
        send_notification_sms_retry:
            connection:       default
            exchange_options: {name: 'x.resend.notification', type: direct}
            queue_options:    {name: 'q.resend.notification.sms', routing_keys: ['rk.notification.sms'], arguments: {'x-dead-letter-exchange': ['S', 'x.resend.notification.sms'], 'x-message-ttl': ['I', 600000]} }
            callback:         AppBundle\Service\SmsNotificationResender
        # should be running with php bin/console rabbitmq:consumer send_notification_sms
        send_notification_sms:
            connection:       default
            exchange_options: {name: 'x.send.notification', type: direct}
            queue_options:    {name: 'q.send.notification.sms', routing_keys: ['rk.notification.sms'] }
            callback:         AppBundle\Service\SmsNotificationSender
    # exchanes and queues used here must be already declared as rabbitmq:setup-fabric will not create these defined here
    bindings:
        - {exchange: x.resend.notification.sms, destination: q.send.notification.sms}